# Time Serise(ts) 학습

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("https://github.com/mwaskom/seaborn-data/raw/master/flights.csv")
df.head()
출력
	year	month	passengers
0	1949	January	112
1	1949	February	118
2	1949	March	132
3	1949	April	129
4	1949	May	121

df1 = df.copy()
# df1['month_n']의 값으로 숫자를 입력하세요
# 입력할 숫자는 month컬럼의 값과 일치하는 달

df1['month_n'] = df1['month'].map({
    'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6, 'July':7, 'August':8,
    'September':9, 'October':10, 'November':11, 'December':12
})

df1
             year	month	passengersmonth_n	day
0	1949	January	112	 1	
1	1949	February	118	 2	
2	1949	March	132	 3	
3	1949	April	129	 4	
4	1949	May	121	 5	
5	1949	June	135	 6	
6	1949	July	148	 7	
7	1949	August	148	 8	
8	1949	September136	 9	
9	1949	October	119	 10	
10	1949	November104	 11	
11	1949	December	118	 12

##
# 만약 함수로 돌린다면..
def make_month_n(row) :
    if row['month'] == 'January':
        return 1
    elif row['month'] == 'February':
        return 2
    elif row['month'] == 'March':
        return 3
    elif row['month'] == 'April':
        return 4
    elif row['month'] == 'May':
        return 5
    elif row['month'] == 'June':
        return 6
    elif row['month'] == 'July':
        return 7
    elif row['month'] == 'August':
        return 8
    elif row['month'] == 'September':
        return 9
    elif row['month'] == 'October':
        return 10
    elif row['month'] == 'November':
        return 11
    elif row['month'] == 'December':
        return 12

df1['month_n2'] = df1.apply(make_month_n, axis=1)
df1
# 이렇게 하면 작업이 너무 길다

# month_n2 삭제
df1 = df1.drop('month_n2', axis=1)
df1

# 컬럼에 day추가하고 값 1 넣기
df1['day'] = 1
df1
출력
             year	month	passengersmonth_nday
0	1949	January	112	1	1
1	1949	February	118	2	1
2	1949	March	132	3	1
3	1949	April	129	4	1
4	1949	May	121	5	1
5	1949	June	135	6	1
6	1949	July	148	7	1
7	1949	August	148	8	1
8	1949	September136	9	1
9	1949	October	119	10	1
10	1949	November104	11	1
11	1949	December118	12	1

# 서로 치환해서 컬럼값자리 바꾸기
df1['month'], df1['month_n'] = df1['month_n'], df1['month']
df1
출력
            year	month	passengersmonth_nday	
0	1949	1	112	January	1	
1	1949	2	118	February	1	
2	1949	3	132	March	1	
3	1949	4	129	April	1	
4	1949	5	121	May	1		

# to_datetime에서 년,월,일 가져오기
# 주의할 사항은 반드시 'year', 'month', 'day' 컬럼명을 넣어 줘야한다
df1['date'] = pd.to_datetime(df1[['year', 'month', 'day']])
df1.head()
출력
             year	month	passengersmonth_nday	date
0	1949	1	112	January	1	1949-01-01
1	1949	2	118	February	1	1949-02-01
2	1949	3	132	March	1	1949-03-01
3	1949	4	129	April	1	1949-04-01
4	1949	5	121	May	1	1949-05-01

df1.plot(x='date', y='passengers')
# 데이터프레임을 이용해서 하면 범례도 자동으로 생김

또는
plt.plot(df1['date'], df1['passengers'])
plt.show()

# 1년짜리 이동평균선 만들기
df1['a1'] = df1['passengers'].rolling(window=12).mean()
df1.head()
출력
            year	month	passengersmonth_nday	date	           a1
0	1949	1	112	January	1	1949-01-01	NaN
1	1949	2	118	February	1	1949-02-01	NaN
2	1949	3	132	March	1	1949-03-01	NaN
3	1949	4	129	April	1	1949-04-01	NaN
4	1949	5	121	May	1	1949-05-01	NaN

ax = df1.plot(x='date', y='passengers')
df1.plot(x='date', y='a1', ax=ax)
또는
plt.plot(df1['date'], df1['passengers'], label='passengers')
plt.plot(df1['date'], df1['a1'], label='annual passengers')
plt.legend(loc='best')
plt.show()


##################
tsex2 생성

cov19.csv 파일명

https://github.com/mwaskom/seaborn-data/raw/master/flights.csv  url 주소값

https://github.com/mwaskom/seaborn-data/raw/master/여기까지가 절대경로이다
flights.csv 상대경로이다

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('cov19.csv')

df.head()

df.info()
출력
0   서울시 기준일            1001 non-null   object 
1   서울시 확진자            1001 non-null   int64 

df['서울시 기준일'] = pd.to_datetime(df['서울시 기준일'])
df.info()
# 서울시 기준일에서 object가 datetime으로 바뀜
출력
0   서울시 기준일            1001 non-null   datetime64[ns]
1   서울시 확진자            1001 non-null   int64 

또는 간단하게
# 새로 불러오면 다시 초기화 된다
# parse_dates을 사용하면
# 자동으로 서울시 기준일에서 object가 datetime으로 바뀜
df = pd.read_csv('cov19.csv', parse_dates=['서울시 기준일'])
df.info()
출력
0   서울시 기준일            1001 non-null   datetime64[ns]
1   서울시 확진자            1001 non-null   int64     

df['날짜'] = df['서울시 기준일']
df.info()
출력
 26  날짜                 1001 non-null   datetime64[ns]

df
# 날짜에 보면 시간을 0시0분0초로 맞춘다
df['날짜'] = df['날짜'].dt.normalize()
df

df['날짜'] == '20221031'
출력
0        True
1       False
2       False
3       False
4       False

df[df['날짜'] == '20221031']
출력
20221031 만 데이터 나옴

# 날짜라는 컬럼명이 사라지고 대신 인덱스에 날짜가 생김
df = df.set_index('날짜')
df

# loc를 이용해서 쉽게 접근할수 있다
# 년도별로
df.loc['2022']

# 22년도 8월달만 나온다
# 월별로
df.loc['2022-08']

# 날짜 순서가 1일부터 출력이 된다
df.loc['2022-08'][::-1]

# 오름차순
df.loc['2022-8'].sort_index(ascending=True)  
# df.loc['2022-8'].sort_index(ascending=True) = df.loc['2022-8'].sort_index() 같다

# 일자별로
df.loc[['2022-08-01']]

# 시계열 데이터를 문자열로 변경하는 것
df['서울시 기준일'][0]
출력
Timestamp('2022-10-31 00:00:00')

str(df['서울시 기준일'][0])
출력
'2022-10-31 00:00:00'

# 00:00:00 제외시키고 날짜만 가져오기
str(df['서울시 기준일'][0])[0:10]
출력
'2022-10-31'

# datetime 모듈을 적용시켜 문자열을 데이터타임으로 만들기
from datetime import datetime

datetime(2022,10,31)
출력
datetime.datetime(2022, 10, 31, 0, 0)

datetime(2022,10,31).strftime('%Y-%m-%d') 
# 소문자 m은 월이 나오고 
# 대문자 M은 분이 나온다
출력
'2022-10-31'

datetime(2022,10,31).strftime('%y-%m-%d') 
# 소문자 y 22
# 대문자 Y 2022
출력
'22-10-31'

str2 = datetime(2022,10,31).strftime('%Y-%m-%d')
datetime.strptime(str2, '%Y-%m-%d')
# (2022, 10, 31, 0, 0) 0시0분
출력
datetime.datetime(2022, 10, 31, 0, 0)

pd.to_datetime(str2)
# datetime.strptime(str2, '%Y-%m-%d')하고 서로 같다
출력
Timestamp('2022-10-31 00:00:00')


# object(문자열) <--> to_datetime() -> to_period()
# 다음 시간에는 datetime -> period로
# frequency(freq): 주기
# 3일마다 3D
# 5일마다 5D
# 1달마다 M
# 3달마다 3M
# 5달마다 5M
# 1년마다 A   Annual의 약자
# 3년마다 3A
# 5년마다 5A

df.index
# Datetime으로 된 Index
출력
DatetimeIndex(['2022-10-31', '2022-10-30', '2022-10-29', '2022-10-28',
               '2022-10-27', '2022-10-26', '2022-10-25', '2022-10-24',
               '2022-10-23', '2022-10-22',
               ...
               '2014-02-20', '2013-02-20', '2012-02-20', '2011-02-20',
               '2010-02-20', '2009-02-20', '2008-02-20', '2007-02-20',
               '2006-02-20', '2005-02-20'],
              dtype='datetime64[ns]', name='날짜', length=1001, freq=None)

ts = df.index

ts.to_period(freq='D')
# 날짜별로 나옴
출력
PeriodIndex(['2022-10-31', '2022-10-30', '2022-10-29', '2022-10-28',
             '2022-10-27', '2022-10-26', '2022-10-25', '2022-10-24',
             '2022-10-23', '2022-10-22',
             ...
             '2014-02-20', '2013-02-20', '2012-02-20', '2011-02-20',
             '2010-02-20', '2009-02-20', '2008-02-20', '2007-02-20',
             '2006-02-20', '2005-02-20'],
            dtype='period[D]', name='날짜', length=1001)

ts.to_period(freq='2D')
# 그냥 D랑 별 차이가 없다
출력
PeriodIndex(['2022-10-31', '2022-10-30', '2022-10-29', '2022-10-28',
             '2022-10-27', '2022-10-26', '2022-10-25', '2022-10-24',
             '2022-10-23', '2022-10-22',
             ...
             '2014-02-20', '2013-02-20', '2012-02-20', '2011-02-20',
             '2010-02-20', '2009-02-20', '2008-02-20', '2007-02-20',
             '2006-02-20', '2005-02-20'],
            dtype='period[2D]', name='날짜', length=1001)

ts.to_period(freq='M')
# 연도랑 월만 나옴
출력
PeriodIndex(['2022-10', '2022-10', '2022-10', '2022-10', '2022-10', '2022-10',
             '2022-10', '2022-10', '2022-10', '2022-10',
             ...
             '2014-02', '2013-02', '2012-02', '2011-02', '2010-02', '2009-02',
             '2008-02', '2007-02', '2006-02', '2005-02'],
            dtype='period[M]', name='날짜', length=1001)

ts.to_period(freq='Y')
# 연도만 나옴
출력
PeriodIndex(['2022', '2022', '2022', '2022', '2022', '2022', '2022', '2022',
             '2022', '2022',
             ...
             '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007',
             '2006', '2005'],
            dtype='period[A-DEC]', name='날짜', length=1001)

#############
df2 = df.copy()
df2

# 인덱스의 날짜를 연도만 나오게 하기 
# 이렇게 해야 나중에 작업할 때 편하다
df2.index = ts.to_period(freq='Y')
df2

# 인덱스의 날짜를 연도만 나오게 하기
# 위에와 같다
df.loc['2022']

np.random.seed = 0

pd.DataFrame(np.random.randn(3, 4), columns=['a1', 'a2', 'a3', '4'], 
             index=['kim', 'lee', 'park'])
출력
	 a1	 a2	 a3	  4
kim	-0.931270-1.922829-0.3722330.162684
lee	2.087907	-0.531396-0.5489751.282507
park	0.376282	-0.571242-0.4017341.381977

pd.date_range(start = '2022-11-02', end = None, periods = 3, freq ='1M')
# freq ='1M'
# 시작점이 말일부터 시작한다.
출력
DatetimeIndex(['2022-11-30', '2022-12-31', '2023-01-31'], dtype='datetime64[ns]', freq='M')

pd.date_range(start = '2022-11-02', end = None, periods = 3, freq ='1MS')
# freq ='1MS'  S를 붙였을 떄
# 시작점이 1일부터 시작하고 
# 11-01은 데이터가 뒤로 갈수 없기 때문에 12-01 부터 시작한다
# 1DS 하루짜리는 없기 때문에 실행하면 오류뜸
출력
DatetimeIndex(['2022-12-01', '2023-01-01', '2023-02-01'], dtype='datetime64[ns]', freq='MS')

pd.date_range(start = '2022-11-02', end = None, periods = 3, freq ='1A')
출력
DatetimeIndex(['2022-12-31', '2023-12-31', '2024-12-31'], dtype='datetime64[ns]', freq='A-DEC')

pd.date_range(start = '2022-11-02', end = None, periods = 3, freq ='1AS')
출력
DatetimeIndex(['2023-01-01', '2024-01-01', '2025-01-01'], dtype='datetime64[ns]', freq='AS-JAN')

ts1 = pd.date_range(start = '2022-11-02', end = None, periods = 3, freq ='1M')
ts1
출력
DatetimeIndex(['2022-11-30', '2022-12-31', '2023-01-31'], dtype='datetime64[ns]', freq='M')

pd.DataFrame(np.random.randn(3, 4), columns=['a1', 'a2', 'a3', '4'], 
             index=ts1)
출력
	             a1	  a2	  a3	  4
2022-11-30	-0.233550-0.657079-1.4059920.055393
2022-12-31	1.285123	0.401934	-1.3393690.613541
2023-01-31	-0.056449-1.562284-2.8736290.230904

ts2 = pd.period_range(start = '2022-11-02', end = None, periods = 3, freq ='1M')
ts2
출력
PeriodIndex(['2022-11', '2022-12', '2023-01'], dtype='period[M]')

# 잘 비교하기
# ts1 출력 DatetimeIndex(['2022-11-30', '2022-12-31', '2023-01-31'], dtype='datetime64[ns]', freq='M')
# ts2 출력 PeriodIndex(['2022-11', '2022-12', '2023-01'], dtype='period[M]')

===ts1===
ts1 = pd.date_range(start = '2022-11-02', end = None, periods = 3, freq ='1M')
'2022-11-30', '2022-12-31', '2023-01-31'
# 날짜까지 나와있다

===ts2===
ts2 = pd.period_range(start = '2022-11-02', end = None, periods = 3, freq ='1M')
'2022-11', '2022-12', '2023-01'
# 월까지만 나와있다

pd.DataFrame(np.random.randn(3, 4), columns=['a1', 'a2', 'a3', '4'], 
             index=ts2)
출력
	a1	 a2	 a3	 4
2022-11	1.235075	-0.446522-1.6854030.109289
2022-12	1.412859	-0.608387-0.3234841.647236
2023-01	1.257663	-0.313897-0.0409400.711133

#######
df3 = pd.DataFrame(np.random.randn(3, 4), columns=['a1', 'a2', 'a3', '4'], 
             index=ts1)
df3

# df3['date']에 df3의 인덱스를 넣어 주세요.
df3['date'] = df3.index
df3.info()
출력
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 3 entries, 2022-11-30 to 2023-01-31
Freq: M
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   a1      3 non-null      float64       
 1   a2      3 non-null      float64       
 2   a3      3 non-null      float64       
 3   4       3 non-null      float64       
 4   date    3 non-null      datetime64[ns]
dtypes: datetime64[ns](1), float64(4)
memory usage: 144.0 bytes

df3['year'] = df3['date'].dt.year
df3
출력
                       a1	a2	a3	4	date	year
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023

df3['month'] = df3['date'].dt.month
df3
출력
                        a1	a2	a3	4	date	year	month
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1

df3['day'] = df3['date'].dt.day
df3
출력
                       a1	a2	a3	4	date	year	month	day
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31

df3.info()
출력
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 3 entries, 2022-11-30 to 2023-01-31
Freq: M
Data columns (total 8 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   a1      3 non-null      float64       
 1   a2      3 non-null      float64       
 2   a3      3 non-null      float64       
 3   4       3 non-null      float64       
 4   date    3 non-null      datetime64[ns]
 5   year    3 non-null      int64         <--정수로 되어있음
 6   month   3 non-null      int64         
 7   day     3 non-null      int64         
dtypes: datetime64[ns](1), float64(4), int64(3)
memory usage: 216.0 bytes

df3['pyear'] = df3['date'].dt.to_period(freq='A')
df3
출력
                       a1	a2	a3	4	date	year	month	day	pyear
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023

df3['pmonth'] = df3['date'].dt.to_period(freq='M')
df3
출력
                       a1	a2	a3	4	date	year	month	day	pyear	pmonth
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022	2022-11
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022	2022-12
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023	2023-01

df3['pday'] = df3['date'].dt.to_period(freq='D')
df3
출력
                       a1	a2	a3	4	date	year	month	day	pyear	pmonth	pday
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022	2022-11	2022-11-30
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022	2022-12	2022-12-31
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023	2023-01	2023-01-31

df3.info()
출력
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 3 entries, 2022-11-30 to 2023-01-31
Freq: M
Data columns (total 11 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   a1      3 non-null      float64       
 1   a2      3 non-null      float64       
 2   a3      3 non-null      float64       
 3   4       3 non-null      float64       
 4   date    3 non-null      datetime64[ns]
 5   year    3 non-null      int64         
 6   month   3 non-null      int64         
 7   day     3 non-null      int64         
 8   pyear   3 non-null      period[A-DEC]  <-- 바뀜
 9   pmonth  3 non-null      period[M]     
 10  pday    3 non-null      period[D]     
dtypes: datetime64[ns](1), float64(4), int64(3), period[A-DEC](1), period[D](1), period[M](1)
memory usage: 288.0 bytes

# df3의 인덱스를 pmonth로 변경하시오
df3 = df3.set_index('pmonth')
df3
출력
             a1	a2	a3	4	date	year	month	day	pyear	pday
pmonth										
2022-11	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022	2022-11-30
2022-12	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022	2022-12-31
2023-01	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023	2023-01-31

# df3의 인덱스를 pyear로 변경하시오
df3 = df3.set_index('pyear')
df3
출력
             a1	a2	a3	4	date	year	month	day	pday
pyear									
2022	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022-11-30
2022	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022-12-31
2023	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31

grp_ts = df3.groupby(df3.index)
grp_ts
출력
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x00000277FA0F60D0>

# 각 년도 별로 첫번째만 나옴
grp_ts.first()
출력
            a1	a2	a3	4	date	year	month	day	pday
pyear									
2022	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022-11-30
2023	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31

grp_ts.last()
출력
            a1	a2	a3	4	date	year	month	day	pday
pyear									
2022	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022-12-31
2023	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31

grp_ts.max()
# 그 연도에 제일 큰 값이 각각 나온다(즉 섞여서 나옴)
출력
            a1	a2	a3	4	date	year	month	day	pday
pyear									
2022	0.965952	0.924177	1.034043	0.748057	2022-12-312022	12	31	2022-12-31
2023	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31

grp_ts.min()
출력
            a1	a2	a3	4	date	year	month	day	pday
pyear									
2022	-0.794844-0.716287-0.035954-1.6351022022-11-302022	11	30	2022-11-30
2023	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31

grp_ts.mean()
출력
            a1	a2	a3	4	year	month	day
pyear							
2022	0.085554	0.103945	0.499044	-0.4435232022.0	11.5	30.5
2023	-0.7294702.065584	-0.6502961.984989	2023.0	1.0	31.0

# 오늘 날짜를 Timestamp으로 만들어 보세요 == datetime 자료형으로 만드세요
today = pd.to_datetime('2022-11-02')
today
출력
Timestamp('2022-11-02 00:00:00')

today-df3['pday'] # <-실행하면 오류뜸
# today와 pday가 자료형이 다릅니다
# 두개의 자료형을 통일합니다

df3['pday'][2].strftime('%Y-%m-%d')
출력
'2023-01-31'

# 방법1. 데이트타임으로 통일 시키기
pd.to_datetime(df3['pday'][2].strftime('%Y-%m-%d'))
출력
Timestamp('2023-01-31 00:00:00')

df3['pday'].apply(lambda x : pd.to_datetime(x.strftime('%Y-%m-%d'))) - today
출력
2022-11-30   28 days
2022-12-31   59 days
2023-01-31   90 days
Name: pday, dtype: timedelta64[ns]

df3['remain1'] = df3['pday'].apply(lambda x : pd.to_datetime(x.strftime('%Y-%m-%d'))) -today
df3['remain1']
출력
remain1
2022-11-30   28 days
2022-12-31   59 days
2023-01-31   90 days
Name: remain1, dtype: timedelta64[ns]

# 방법2. today의 자료형을 period으로 변환하기
today.to_period(freq='D')
출력
Period('2022-11-02', 'D')

df3['pday'] - today.to_period(freq='D')
출력
remain1
2022-11-30    <28 * Days>
2022-12-31    <59 * Days>
2023-01-31    <90 * Days>
Name: pday, dtype: object

df3['remain2'] = df3['pday'] - today.to_period(freq='D')
df3
출력

                        a1	a2	a3	4	date	year	month	day	pday	remain2	         remain1
remain1											
2022-11-30	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022-11-30<28 * Days>	28 days
2022-12-31	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022-12-31<59 * Days>	59 days
2023-01-31	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31<90 * Days>	90 days

df3.info()
# 9   remain1  3 non-null      datetime64[ns] 
#10  remain2  3 non-null      object        
# 결과를 보면 자료형이 다르다는걸 알고 잇어야한다
출력
 9   remain2  3 non-null      object         
 10  remain1  3 non-null      timedelta64[ns]

df3 = df3.set_index('remain1')
df3
출력
             a1	a2	a3	4	date	year	month	day	pday	remain2
remain1										
28 days	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022-11-30<28 * Days>
59 days	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022-12-31<59 * Days>
90 days	-0.7294702.065584	-0.6502961.984989	2023-01-312023	1	31	2023-01-31<90 * Days>

df3['28 days':'60 days']
출력
             a1	a2	a3	4	date	year	month	day	pday	remain2
remain1										
28 days	-0.794844-0.716287-0.0359540.748057	2022-11-302022	11	30	2022-11-30<28 * Days>
59 days	0.965952	0.924177	1.034043	-1.6351022022-12-312022	12	31	2022-12-31<59 * Days>
​

#########################
# cov19.csv 파일을 이용해서
# df
# df1

# df2
# 1. 2020, 2021, 2022년도별로
# 서울시 추가 확진자 수를 막대 그래프로 그려 보세요

# df3
# 2. 2021년도의 월별로
# 서울시 추가 확진자 수를 라인(선) 그래프로 그려 보세요

# df4
# 3. 2022년 10월의 일자별로
# 서울시 추가 확진자 수를 라인(선) 그래프로 그려 보세요
# 전국 추가 확진자 수를 라인(선) 그래프로 그려 보세요










































































































































































































































































































