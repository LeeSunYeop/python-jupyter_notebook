import numpy as np
# 넘파이 어레이 배열 객체 2를 만들고
# 이 두객체에 대해서 +, -, *, / 연산을 하세요.
# arr1 * 10을 하고 결과 확인: 브로드캐스팅(크기가 달라도 연산이 가능하다)

np.full((3, 4), 3, dtype=float)
출력
array([[3., 3., 3., 3.],
       [3., 3., 3., 3.],
       [3., 3., 3., 3.]])

arr100 = np.arange(1, 20, 3)
arr100
출력
array([ 1,  4,  7, 10, 13, 16, 19])

arr100 = np.arange(0, 20)
arr100
출력
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19])

arr101 = arr100.reshape(4, 5)
arr102 = np.arange(5)

print(arr101)
출력
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]

print(arr102)
출력
[0 1 2 3 4]

# 구조가 다른 배열끼리 연산이 가능하게 해주는 기능: broadcast(ing)
arr101 + arr102
출력
array([[ 0,  2,  4,  6,  8],
       [ 5,  7,  9, 11, 13],
       [10, 12, 14, 16, 18],
       [15, 17, 19, 21, 23]])

arr101 - arr102
출력
array([[ 0,  1,  4,  9, 16],
       [ 0,  6, 14, 24, 36],
       [ 0, 11, 24, 39, 56],
       [ 0, 16, 34, 54, 76]])

arr101 / arr102
출력
array([[        nan,  1.        ,  1.        ,  1.        ,  1.        ],
       [        inf,  6.        ,  3.5       ,  2.66666667,  2.25      ],
       [        inf, 11.        ,  6.        ,  4.33333333,  3.5       ],
       [        inf, 16.        ,  8.5       ,  6.        ,  4.75      ]])

arr101 // arr102
출력
array([[ 0,  1,  1,  1,  1],
       [ 0,  6,  3,  2,  2],
       [ 0, 11,  6,  4,  3],
       [ 0, 16,  8,  6,  4]], dtype=int32)

arr101 % arr102
출력
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 2, 1],
       [0, 0, 0, 1, 2],
       [0, 0, 1, 0, 3]], dtype=int32)


파이썬은 모듈 하나하나가 언어의 특성을 가지고 있음.
- 파이썬의 문법이 적용이 안 되는 모듈이 있을 수 있음

일반적으로 언어가 버전을 업그레이드 시키면 업그레이드 된 버전은 하위버전과 호환이 됩니다.
이 원칙을 깬 언어기 파이썬..
파이썬2버전과 파이썬3버전..
호환 안됨

arr102[0]    # 인덱싱..
출력
0

arr102[0:2]  # 슬라이싱하면 결과값이 array로 나온다는거 유심히 봐야한다.
출력
array([0, 1])

arr102[-1]  
출력
4

len(arr102)
출력
5

arr102[len(arr102)-1]
출력
4

# 2차원 배열에는 몇 차원 배열이 들어 있다? 
# 2-1차원 배열
# n차원 배열에는
# n-1차원 배열이 들어 있다.

arr101[0]
출력
array([0, 1, 2, 3, 4])

arr101[1]
출력
array([5, 6, 7, 8, 9])

arr101[3]
출력
array([15, 16, 17, 18, 19])

t1 = arr101[0]
t2 = arr101[1]
t3 = arr101[2]
t4 = arr101[3]

# [ 0, 1, 2, 3, 4]
t1[2]        즉  arr101[0][2]  이렇게 됨
출력
2

# [ 5, 6, 7, 8]
t2[2]
출력
7

arr101[0][2]
출력
2

# arr101에서 13과 16을 가져오는 인덱싱 코드를 올려 주세요
print(arr101[2][3])
print(arr101[3][1])
출력
13
16

# 위 방법은 arr101을 배열이라고 생각하고 인덱싱한 것임
# 그리고 numpy 에서도 이 방법을 선호하지 않음

# 행렬처럼 인덱싱하기
arr101[2, 3]
출력
13

arr101[3, 1]
출력
16

arr101
출력
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

# arr101의 2와 7을 행렬처럼 인덱싱해 보세요
print(arr101[0, 2])
print(arr101[1, 2])
출력
2
7

# 넘파이 인덱싱 끝..
# 구조적(문법적)으로 막지 않은 이상 인덱싱이 가능하면, 수정도 가능하다.

# arr101의 최종 요솟값 2를 50으로 수정하기
arr101[0, 2] = 50
arr101
출력
array([[ 0,  1, 50,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

arr101[1, 2] = 100
arr101
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

# 슬라이싱: 슬라이스의 결과는 해당 자료형과 같음

arr101[ , ] # 모든요소를 가지고 오고 싶어서 했지만 오류뜸

# 모든요소 가지고 오기
arr101[ : , : ]
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

arr102                              arr102[ : ]
출력
array([0, 1, 2, 3, 4])               array([0, 1, 2, 3, 4])          

arr102[ 0 : 4 ]
출력
array([0, 1, 2, 3])

arr102[0:3]
출력
array([0, 1, 2])

arr102[ : 3]    # 앞에 비워두면 0이라고 생각하면 된다
출력
array([0, 1, 2])

arr101[ : , : ]
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

슬라이싱 배우는 중이니 슬라이싱으로 해보기
arr101[  : 1 , : 5 ]            또는  arr101[ 0 : 1 , : ]  또는  arr101[ : 1, : ]   # 이게 가장 좋은 방법이다
출력
array([[ 0,  1, 50,  3,  4]])

arr101[ : 2 , :  ]                                  arr101[ 1 : 3 ,  :  ]
출력
array([[  0,   1,  50,   3,   4],                   array([[  5,   6, 100,   8,   9],
       [  5,   6, 100,   8,   9]])                          [ 10,  11,  12,  13,  14]])

arr101[ 1:3, 1:4 ]
출력
array([[  6, 100,   8],
       [ 11,  12,  13]])

arr101[ :4, 2:3]       
출력
array([[ 50],           4차원으로 출력됨
       [100],
       [ 12],
       [ 17]])

arr101[:, 2]           1차원으로 출력됨
출력
array([ 50, 100,  12,  17])  들어가는 요솟값은 같지만 위의 형태와 다르다

# boolean 인덱싱(mask)
arr102
출력
array([0, 1, 2, 3, 4])

x = np.full_like(arr102, True, dtype=bool)
x
출력
array([ True,  True,  True,  True,  True])

arr102[x]
출력
array([0, 1, 2, 3, 4])

x[0] = False
x
출력
array([False,  True,  True,  True,  True])

arr102[x]
출력
array([1, 2, 3, 4])

names = np.array(["홍길동", "김유신", "계백", "이순신", "홍길동"])
names
출력
array(['홍길동', '김유신', '계백', '이순신', '홍길동'], dtype='<U3')

y = names == "홍길동"  # 하나씩 비교해서 True,False를 판단한다
y
출력
array([ True, False, False, False,  True])

arr102[y]  # 결과값이 True 인것만 출력된다
출력
array([0, 4])

# 특정 조건을 만족하는 값을 추출할 때 사용한다
# 예를들면 홍길동의 점수만 다 뽑아보아라

arr101
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

arr101[y]  출력하면 오류가 뜸
# y는 크기가 5 입니다 arr101: (4, 5) 이다
# arr101[y]를 했을 때,
# 그냥 5에 맞춰주는 정상적으로 동작할텐데, 왜 4에 맞췄을까?

z = np.full((4, ), True, dtype=bool)
z
출력
array([ True,  True,  True,  True])

arr101[z]  
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

arr101[0]
# [  0,   1,  50,   3,   4]에 각각의 자리에다 True를 비교해서 False 없는지 확인 후 출력됨
# 만약 False가 있으면 출력이 안된다.
출력
array([ 0,  1, 50,  3,  4])

z[1] = False
arr101[z]   # False 들어간 자리만 빼고 출력이 됨
출력
array([[ 0,  1, 50,  3,  4],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

# x = [True, ~]
# y = names 어레이에서 특정 조건의 값을 갖고 있는 것에 True 그렇지 않으면 False가 되게...

print(x)
print(y)
print(z)
출력
[False  True  True  True  True]
[ True False False False  True]
[ True False  True  True]

arr102[x]  # True 값만 출력이 된다
출력
array([1, 2, 3, 4])

arr102[y]
출력
array([0, 4])

arr101[z]
출력
array([[ 0,  1, 50,  3,  4],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

arr102[[False,  True,  True,  True,  True]]
출력
array([1, 2, 3, 4])

arr102[[ True, False, False, False,  True]]
출력
array([0, 4])

q = np.full_like(arr101, True, dtype=bool)
q.shape
q
출력
array([[ True,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True]])

# arr101과 각 요솟값과 10을 비교연산을 하는데, 10보다 크면 True 그렇지 않으면 False
# 그리고 그 결과를 q에 대입하세요

q = arr101 > 10
q
출력
array([[False, False,  True, False, False],
       [False, False,  True, False, False],
       [False,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True]])

arr101
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

arr101[q]   # Ture인 값만 출력이 된다
출력
array([ 50, 100,  11,  12,  13,  14,  15,  16,  17,  18,  19])

# s = arr101와 구조가 같음. 
# 그안에 들어가 있는 데이터는 arr101의 각 요솟값이 10보다 크면 True
# 또는 5보다 작으면 True 
# 그 외에는 False인 값이 들어 있다.
# arr101[i] > 10 , arr101[i] < 5 

s = (arr101 > 10) | (arr101 < 5)
s
출력
array([[ True,  True,  True,  True,  True],
       [False, False,  True, False, False],
       [False,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True]])

arr101[s]
출력
array([  0,   1,  50,   3,   4, 100,  11,  12,  13,  14,  15,  16,  17,
        18,  19])

# fancy 인덱싱
# 기존 슬라이싱: 붙어 있는 데이터를 가져오기 사용
# 마스크(boolean 인덱싱): 붙어 있지 않아도 데이터를 슬라이싱이 가능함.  True/False로 바꾼후 작업해야함
# 팬시 인덱싱: 붙어 있지 않아도 데이터를 슬라이싱 할 수 있음. 인덱스를 이용해서 인덱싱함

arr101
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

arr101[[0, 2]]
출력
array([[ 0,  1, 50,  3,  4],
       [10, 11, 12, 13, 14]])  나온다 거기에

arr101[[0, 2]][ : , [0, 3, 4]] 
출력
array([[ 0,  3,  4],
       [10, 13, 14]])  각각의 요솟값이 나온다

하지만 팬시 인덱싱을 이용하면..
arr101[ np.ix_([0, 2],[0, 3, 4]) ]   # ix_인덱싱 사용하면 각각의 요솟값 출력이 가능함
출력
array([[ 0,  3,  4],
       [10, 13, 14]])   간단하게 출력이 가능하다.


# 10 17 8 뽑아내기
print(arr101[2,0])  # 10
print(arr101[3,2])  # 7
print(arr101[1,3])  # 8
출력
10
17
8

np.stack([arr101[2,0], arr101[3,2], arr101[1,3]])   # 1차원 배열로 출력됨
# 각각의 요솟값을 하나로 묶으려면 list->[] 사용하면됨
# [arr101[2,0], arr101[3,2], arr101[1,3]]
출력
array([10, 17,  8])

np.vstack([arr101[2,0], arr101[3,2], arr101[1,3]]) # 2차원 배열로 출력됨
출력
array([[10],
       [17],
       [ 8]])

# 임의의 데이터가 들어 있는 array 만들기

# 정규분포함수에 의한 2x3 배열 생성
np.random.rand(2, 3)
출력
array([[0.5331968 , 0.9286445 , 0.29998268],
       [0.2989577 , 0.31197059, 0.36978423]])  임의의 값이 출력됨

# 표준정규분포함수에 의한 2x3 배열 생성
# 표준정규분포: 정규분포라는 것이 모집단에 따라서 그 값이 다를 수 있음. 그래서
# 비교가 불가능할 때가 있음. 이런 상황에서 비교가 가능하게 해주는 것이 표준정규분포
np.random.rand(2, 3)
출력
array([[0.64364643, 0.94416099, 0.47052745],
       [0.98131246, 0.08697865, 0.7626739 ]])    임의의 값이 출력됨

# 균등분포
np.random.uniform(1, 100, 10)
출력
array([98.9887457 ,  7.52209628, 48.71218062, 19.51331182,  1.88039487,
       23.3692477 , 60.14468709, 25.96887323, 36.00350635, 47.87894734])

# 넘파이가 제공하는 정규분포함수
np.random.normal(0, 1, 5)
출력
array([0.20443672, 0.1504241 , 1.5968595 , 1.60727279, 0.73421321])

arr101
출력
array([[  0,   1,  50,   3,   4],
       [  5,   6, 100,   8,   9],
       [ 10,  11,  12,  13,  14],
       [ 15,  16,  17,  18,  19]])

np.sum(arr101)  # 최종요솟값을 다 더한값
출력
331

# 0은 세로방향, 1은 가로방향을 의미함
np.sum(arr101, axis=0) # 각 세로 방향의 합
출력
array([ 30,  34, 179,  42,  46])

# 각 가로방향의 합
np.sum(arr101, axis=1) 
출력
array([ 58, 128,  60,  85])

# 전체 평균
np.mean(arr101)
출력
16.55

# 각 열의 방향으로 평균 구하기
np.mean(arr101, axis=0)
출력
array([ 7.5 ,  8.5 , 44.75, 10.5 , 11.5 ])

# 각 가로방향으로 평균 구하기
np.mean(arr101, 1)
출력
array([11.6, 25.6, 12. , 17. ])

# 표준편차: std()
# arr101의 모든 데이터를 대상으로 표준편차 구하기
np.std(arr101)
출력
21.724352694614403

np.std(arr101, axis=0)
출력
array([ 5.59016994,  5.59016994, 35.08115591,  5.59016994,  5.59016994])

np.std(arr101, axis=1)
출력
array([19.25201288, 37.22687201,  1.41421356,  1.41421356])

np.min(arr101)
출력
0

np.max(arr101)
출력
100

# arr101의 각 열에서 가장 작은 값 구하기
np.min(arr101, 0)
출력
array([ 0,  1, 12,  3,  4])

# arr101의 각 행에서 가장 큰값 구하기
np.max(arr101, 1)
출력
array([ 50, 100,  14,  19])

# arr101의 요솟값 중 가장 큰 값의 인덱스 구하기
np.argmax(arr101)
# 출력값에 7은 7번째에 있는 100 이 가장큰 값이다라는 의미이다
# 근데 7번째를 어떻게 순서를 정하는가?
# 0 1 2 3 4  
# 5 6 7 8 9
# 10 11 12 13 14 
# 15 16 17 18 19   이렇게 순서를 매긴다
출력
7

np.argmin(arr101)
출력
0

# arr101의 각 열의 가장 작은 수의 인덱스 구하기
np.argmin(arr101,0)
출력
array([0, 0, 2, 0, 0], dtype=int64)

# arr101의 각 행의 가장 큰 수의 인덱스 구하기
np.argmax(arr101, 1)
출력
array([2, 2, 4, 4], dtype=int64)

# 누적 합
np.cumsum(arr101)
출력
array([  0,   1,  51,  54,  58,  63,  69, 169, 177, 186, 196, 207, 219,
       232, 246, 261, 277, 294, 312, 331], dtype=int32)

# arr101의 각 열의 누적 합을 구하기
np.cumsum(arr101, 0)
출력
array([[  0,   1,  50,   3,   4],
       [  5,   7, 150,  11,  13],
       [ 15,  18, 162,  24,  27],
       [ 30,  34, 179,  42,  46]], dtype=int32)

# arr101의 전체에 대한 누적 곱이다
np.cumprod(arr101)
출력
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      dtype=int32)

# arr101의 각 열의 누적곱 구하기
np.cumprod(arr101, 0)
출력
array([[      0,       1,      50,       3,       4],
       [      0,       6,    5000,      24,      36],
       [      0,      66,   60000,     312,     504],
       [      0,    1056, 1020000,    5616,    9576]], dtype=int32)

##############
matplotlib 연습1

# matplotlib: 시각화 라이브러리
# 빅데이터 분석을 할 때, 최종적으로 그래프를 만들지만,
# 빅데이터 분석 전에도 그래프를 생성해서 추세를 확인함
# matplotlib를 설치를 해야하는데, 아나콘다를 사용하고 있기 때문에 별도로 설치 안함
# 만약 설치가 되어있지 않으면
# python -m pip install -u pip
# python -m pip install -u matplotlib
# 다운 받으면 된다
# linux: ubuntu(Debian에서 만들어짐)
#  sudo apt-get install python3-matplotlib <- 리눅스 우분투에서 다운 받으면 된다
# linux: Fedora : sudo dnf install python3-matplotlib
# linux: redHat: sudo yum install python3-matplotlib (유료서비스)

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.__version__
'3.6.1'  이렇게 떠야지 설치가 된것임

cmd관리자모드 
python -m pip install -U pip
python -m pip install -U matplotlib

설치 후 
cmd의 경로를 c:\users\admin\python_workspace로 변경
 -   cd c:\users\admin\python_workspace 엔터

jupyter notebook 입력 후 엔터

import matplotlib.pyplot as plt 실행
matplotlib.__version__ 실행

#############

plt.plot([1, 2, 3, 4, 5])
plt.show()
출력
그래프 나옴

# 리스트나 넘파이 은 이렇게 나타내면 된다
plt.plot([1, 2, 3, 4], [10, 20, 30, 40])
plt.show()
출력
그래프 나옴

# 딕셔너리를 나타낼 때 쓴다
dict_1 = {"id" : [1, 2, 3, 4, 5], "score" : [100, 80, 90, 60, 80]}
plt.plot("id", "score", data = dict_1)
plt.show()
출력
그래프 나옴

# 'r'를 넣으면 선이 빨간색으로 출력됨
plt.plot([1, 2, 3, 4, 5], [10, 20, 15, 30, 20], 'r') 
plt.show()

# g, b, k(블랙)를 넣으면 색깔선이 출력됨
plt.plot([1, 2, 3, 4, 5], [10, 20, 15, 30, 20], 'g') 
plt.show()

# k. 점을 찍으면 점으로 출력됨
# , 쉼표를 넣으면 쉼표로 출력됨
# ko, kv, k^, kd 등등 여러가지 있으므로 겸색해서 알아보기
plt.plot([1, 2, 3, 4, 5], [10, 20, 15, 30, 20], 'k.') 
plt.show()

# 선 종류 넣기
# k^-, k^:, k^-- 등등 있다
plt.plot([1, 2, 3, 4, 5], [10, 20, 15, 30, 20], 'k_--') 
plt.show()

# 선 모양: -, --, -., :
# maker(마커): o, s, v, ^, + ,*, d, D

# 한 화면에 여러개의 그래프 그리기
data1 = np.arange(0, 20)

data2 = data1 * 3
data3 = data1 ** 2 # ** 요소하나하나 두번 곱함
data4 = data1 ** 2 + 100 

plt.plot(data1, data2, 'r--', data1, data3, "gs", data1, data4, "m-.^")
plt.show()

#############################
# 암기 하세요
import numpy as np
import matplotlib.pyplot as plt

data1 = np.arange(0, 20)
data2 = data1 * 3
data3 = data1 ** 2
data4 = data1 ** 2 + 100

plt.plot(data1, data2, "r--", data1, data3, "gs", data1, data4, "m-.^")
plt.show()

########
import matplotlib.pyplot as plt
import numpy as np

data1 = np.arange(1, 20)
data2 = data1 * 3
data3 = data1 * 3 + 5
data4 = data1 * 3 - 5
 
plt.rc("font", family="Malgun Gothic")   # 한글이 깨지지 않게 해준다
plt.plot(data1, data2, "ro-", data1, data3, "gd", data1, data4, "m^:")
plt.xlabel("x 축")
plt.ylabel("y 축")
plt.show()






















































































































































































































































































































