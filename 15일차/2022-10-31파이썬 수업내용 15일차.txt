import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = sns.load_dataset('titanic')
df.head()

df1 = df.copy()

df1['survived'].value_counts()
출력
0    549
1    342
Name: survived, dtype: int64

# alive 그래프 그려 보세요
# plt.bar()
# plt.show()

df1['alive'].value_counts()
출력
no     549
yes    342
Name: alive, dtype: int64

x = df1['alive'].value_counts().index
y = df1['alive'].value_counts()
plt.bar(x, y, color=['r', 'g'])
plt.show()

# 성별에 따른 숫자를 bar 차트로 표현하시오
x1 = df['sex'].value_counts().index
y1 = df['sex'].value_counts()

fonts = {
    "xtick": {"family":"Malgun Gothic", "color":"r", "size":12}
}

plt.bar(x1, y1, color=['k', 'y'])
plt.xticks(x1, labels=['남성', '여성'], fontdict=fonts['xtick'])
plt.show()

# df1을 pivot_table()을 이용해서 sex와 pclass로 그룹화시키세요.
# 그리고 df3에 할당하세요. values는 alive의 count가 되게 하세요
df3 = df1.pivot_table(index=['sex', 'pclass'], values='alive', aggfunc='count').reset_index()
df3
출력
           sex	pclass	alive
0	female	1	94
1	female	2	76
2	female	3	144
3	male	1	122
4	male	2	108
5	male	3	347

# pclass의 값 1, 2, 3을 x2의 값으로 설정하려고 합니다
x2 = df3['pclass'].unique()
x2
출력
array([1, 2, 3], dtype=int64)

# df3에서 여성의 각 pclass별 생존자 수를 구하려고 합니다.
# df3_female_alive =
y2 = df3[df3['sex'] == 'female']['alive']
y2
출력
0     94
1     76
2    144
Name: alive, dtype: int64

plt.bar(x2, y2, color=['r', 'g', 'k'])
plt.show()

# df3에서 남성의 각 pclass별 생존자 수를 구하고 y22에 대입합니다.
y22 = df3[df3['sex'] == 'male']['alive']
y22
출력
3    122
4    108
5    347
Name: alive, dtype: int64

plt.bar(x2, y2, color='r')
plt.bar(x2, y22, color='g', bottom=y2)
plt.xticks(x2, ['first', 'second', 'third'])
# bottom=y2(여성) 를 아래에다 나타내고 그위에 y22(남성)를 나타내라는 뜻
plt.show()
# 그래프해석: 살아있든 죽어있든 1,2,3등칸에 있는 남성,여성

w = 0.5
plt.bar(x2-w/4, y2, color='r', width = w/2, label='woman')
plt.bar(x2+w/4, y22, color='g', width = w/2, label='man')
plt.xticks(x2, ['first', 'second', 'third'])
plt.legend(loc='best')
plt.show()

##########
# df1에서 산 사람들의 행을 추출해서 df2에 할당하세요
df2 = df1[df1['alive']== 'yes']   # 또는 df1.loc[df1['alive']== 'yes']
df2 

df2['sex'].value_counts()
출력
female    233
male      109
Name: sex, dtype: int64

# df2을 pivot_table()을 이용해서 sex와 pclass로 그룹화시키세요.
# 그리고 df3에 할당하세요. values는 alive의 count가 되게 하세요
df3 = df2.pivot_table(index=['sex', 'pclass'], values='alive', aggfunc='count').reset_index()
df3
출력
           sex	pclass	alive
0	female	1	91
1	female	2	70
2	female	3	72
3	male	1	45
4	male	2	17
5	male	3	47

# pclass의 값 1, 2, 3을 x2의 값으로 설정하려고 합니다
x2 = df3['pclass'].unique()
x2 = sorted(x2)  # sorted 하면 리스트가 되어 버린다
x2 = np.array(x2) # 그래서 다시 np.aarry 이용해서 배열로 만든다
x2
출력
array([1, 2, 3], dtype=int64)

# df3에서 여성의 각 pclass별 탑승자 수를 구하고 y2에 대입합니다.
# df3_female_alive =
y2 = df3[df3['sex'] == 'female']['alive']
y2
출력
0    91
1    70
2    72
Name: alive, dtype

# df3에서 남성의 각 pclass별 탑승자 수를 구하고 y22에 대입합니다.
y22 = df3[df3['sex'] == 'male']['alive']
y22
출력
3    45
4    17
5    47
Name: alive, dtype: int64

plt.bar(x2, y2, color='r')
plt.bar(x2, y22, color='g')
plt.xticks(x2, ['first', 'second', 'third'])

plt.show()

# 남성,여성 각각 나오게 만들기
w = 0.5
plt.bar(x2-w/4, y2, color='r', width = w/2, label='woman')
plt.bar(x2+w/4, y22, color='g', width = w/2, label='man')
plt.xticks(x2, ['first', 'second', 'third'])
plt.legend(loc='best')
plt.show()

#########
# 비율로 그래프 그리기
labels=['f_1', 'f_2', 'f_3', 'm_1', 'm_2', 'm_3']

df3
# round((91/891)*100, 2)
# 소숫2자리까지만 나오게 한다

def make_ratio(x) :
    return round((x/891)*100, 2)

# 전체에서 산사람의 비율을 나타냄
ratio = df3['alive'].apply(make_ratio)
ratio
출력
0    10.21
1     7.86
2     8.08
3     5.05
4     1.91
5     5.27
Name: alive, dtype: float64

# 300몇명에 대한 산사람의 비율을 나타냄
plt.pie(ratio, labels=labels, autopct="%.2f%%")
plt.show()

##########
pandasex11 생성

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df1 = pd.DataFrame({
    'age' : [x for x in range(0, 100, 1)]
})
df1.head()
출력
	age
0	0
1	1
2	2
3	3
4	4

bins = [-1, 10, 20, 30, 40, 50, 60, df1['age'].max()]

labels = ['child', '10th', '20th', '30th', '40th', '50th', "노년"]

df1['ages'] = pd.cut(df1['age'], bins, labels=labels)
df1

df1['ages'].value_counts()
출력
노년       39
child    11
10th     10
20th     10
30th     10
40th     10
50th     10
Name: ages, dtype: int64

df1[df1['age']>90]
출력
	age	ages
91	91	노년
92	92	노년
93	93	노년
94	94	노년
95	95	노년
96	96	노년
97	97	노년
98	98	노년
99	99	노년

##########################
# titanic 데이터 셋을
# df 변수에 할당하세요
df = sns.load_dataset('titanic')
df.head()

df.info()
출력
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB

# 891을 714로 만들기
df2 = df[df['age'].notna()]
df2.head()

df2.info()
출력
<class 'pandas.core.frame.DataFrame'>
Int64Index: 714 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     714 non-null    int64   
 1   pclass       714 non-null    int64   
 2   sex          714 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        714 non-null    int64   
 5   parch        714 non-null    int64   
 6   fare         714 non-null    float64 
 7   embarked     712 non-null    object  
 8   class        714 non-null    category
 9   who          714 non-null    object  
 10  adult_male   714 non-null    bool    
 11  deck         184 non-null    category
 12  embark_town  712 non-null    object  
 13  alive        714 non-null    object  
 14  alone        714 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 70.2+ KB

################
# cut: 데이터를 데이터값을 기준으로 일정하게 자른다
# [0, 6, 12, 18, 60, 맥스]
# 0~6, 6~12, 12~18, 18~50, 50~df2['age'].max()(끝까지라는 의미)
# ['유아', '어린이', '청소년', '청장년', '노년']

bins = [0, 6, 12, 18, 60, df2['age'].max()]
labels = ['유아', '어린이', '청소년', '장년', '노년']
df2['agegrade'] = pd.cut(df2['age'], bins, labels=labels)
df2

###########
# agegrade에 따른 생존자 수를 그래프로 만들어 보세요
df3 = df2[df2['alive'] == 'yes']
df3

df3['sex'].value_counts()
출력
female    197
male       93
Name: sex, dtype: int64

df4 = df2.pivot_table(index='agegrade', values='survived', aggfunc=['count', 'sum']).reset_index()
df4
출력
          agegrade	count	sum
                      survived	survived
0	유아	47	33
1	어린이	22	7
2	청소년	70	30
3	장년	553	215
4	노년	22	5

df4['sum']['survived']
출력
0     33
1      7
2     30
3    215
4      5
Name: survived, dtype: int64

그래프1
x1 = df4['agegrade']
y1 = df4['sum']['survived']   # 생존자 수
y2 = df4['count']['survived'] # 탑승자 수

plt.rc('font', family='Malgun Gothic')

plt.bar(x1, y1)
plt.show()

그래프2
w = 0.5

idxs = np.array([0, 1, 2, 3, 4])

plt.bar(idxs-w/4, y1, width=w/2)
plt.bar(idxs+w/4, y2, width=w/2)
plt.xticks(idxs, x1)
plt.show()

##########
# 각 agegrade별 생존율을 파이플롯으로 표현하시오

# 생존비율
y = y1/y2
y
출력
0    0.702128
1    0.318182
2    0.428571
3    0.388788
4    0.227273
Name: survived, dtype: float64

# 그래프
plt.bar(x1, y)
plt.show()

df2['survived'].sum()
출력
290

#그래프
ratio = y1/290
plt.pie(ratio, labels=x1, autopct="%.2f%%")
plt.show()

#########
# qcut: 데이터를 나누고싶은 구역에 모두 똑같은 개수가 들어가도록 나눈다
labels=['a', 'b', 'c']

df1["agegrade"] = pd.qcut(df1["age"], q=3, labels=labels)
df1.head()
출력
	age	ages	agegrade
0	0	child	a
1	1	child	a
2	2	child	a
3	3	child	a
4	4	child	a

###################
pandasex12 생성

사이트 서울 열린 데이터 광장 에서 인기데이터 -> 코로나 다운 받고 다운 받은 파일에서 메모장 다른이름저장하기 utf-8로 하기

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('cov19.csv')
df.head()

df.info()

df2 = df.copy()
df2['서울시 기준일'] = pd.to_datetime(df['서울시 기준일'])
df2

df2['서울시 기준일'].dt.year
df2['서울시 기준일'].dt.month
df2['서울시 기준일'].dt.day

# 요일 정보
df2['서울시 기준일'].dt.dayofweek.unique()
출력
array([0, 6, 5, 4, 3, 2, 1], dtype=int64)

# 분기 정보
df2['서울시 기준일'].dt.quarter

# 숫자를 요일로 바꾸기
df2["요일"] = df2['서울시 기준일'].dt.dayofweek

df2["서울시 기준일"].dt.dayofweek.head(1)
출력
0    0   0번이 월요일이라는걸 알아낼수 있다.

bins = [-1, 0, 1, 2, 3, 4, 5, 6]
df2["요일"] = pd.cut(df2["요일"], bins = bins, labels=["월", "화", "수", "목", "금", "토", "일"])

df2["요일"]
출력
0       월
1       일
2       토
3       금
4       목
       ..
996     금
997     수
998     화
999     월
1000    일
Name: 요일, Length: 1001, dtype: category
Categories (7, object): ['월' < '화' < '수' < '목' < '금' < '토' < '일']






































































































































































































































































