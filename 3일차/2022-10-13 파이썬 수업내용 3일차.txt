test = {"id":"z1", "name":"kim"}
"id" in test    # id안에 값이 있냐? 맞으면 True, 틀리면 False
출력
True

"age" in test
출력
False

############################
# set(): 집합자료형..
# set(): 집합자료형에 사용된다는 기능을 제외하고 java의 Set과 똑같음
# 데이터의 중복을 허용하지 않음
# java Map의 키의 자료형으로 Set을 사용함
# 순서가 없음 -> index가 없음
# val만 입력함
# set()

set1 = set([1, 2, 3, 4,])          # list를 이용
set2 = set((1, 2, 3, 4))          # 튜플을 이용
print(set1)
print(set2)
출력
{1, 2, 3, 4}
{1, 2, 3, 4}

set1.add(5)
set1
출력
{1, 2, 3, 4, 5}

set1.add(5)
set1            # 한번더 입력해도 중복이 안된다
                #중복되지 않은건 삽입이 되지만 중복되는건 삽입이 안된다
출력
{1, 2, 3, 4, 5}

set1.add(6)       # unique = 유일무이
set1
출력
{1, 2, 3, 4, 5, 6}

print(set1)
set1.remove(6)
print(set1)
출력
{1, 2, 3, 4, 5, 6}
{1, 2, 3, 4, 5}


set1.remove(6)   # 값이 없는걸 삭제하려고 하면 에러뜸
출력
에러뜸

set1.discard(6)   # 값을 삭제함 , 값이 없어도 에러가 안뜸
set1
출력
{1, 2, 3, 4, 5}

set1.discard(5)
set1
출력
{1, 2, 3, 4}

print(set1)
rn = set1.pop()
print(rn)
print(set1)
출력
{1, 2, 3, 4}
1
{2, 3, 4}

len(set1)
출력
3

2 in set1          1 in set1
출력
True                False


print(set2)            # dictionary: { }
set2.clear()           # set()  출력하면 값이 딕셔너리는 { }나오고 set() 이렇게 나오는데 서로 겹치지않게
print(set2)            # 구분짓게 하려고 한다
출력
{1, 2, 3, 4}
set()

##########
FIFO(First In First Out) 도로에 있는 터널 생각하면됨, 즉 처음 들어간 데이터는 처음에 나온다
FIFL(First In Last Out) 먹는 프링글스 통 생각하면됨, 즉 입구는 뚫려있고 출구는 막혀있다 즉, 먼저 들어간 데이터는 맨 나중에 나온다.


s1 = set([1, 2, 3, 4, 5])
s2 = {5 , 6, 7}    
print(s1)
print(s2)
출력                    # 둘다 값이 set으로 나옴
{1, 2, 3, 4, 5}
{5, 6, 7}

#############
# 교집합
s1 & s2   # 딸랑 5만 나오는게 아니고 {}중괄호에 같이 나와 set 이라고 한다
출력
{5}

# 교집합2
s1. intersection(s2)  # intersection 공통된 부분을 말함 즉, 교집합임
출력
{5}

# 합집합
s1 | s2
출력
{1, 2, 3, 4, 5, 6, 7}

# 합집합2
s1.union(s2)
출력
{1, 2, 3, 4, 5, 6, 7}

# 차집합 1-1
s1 - s2
출력
{1, 2, 3, 4}

# 차집합 1-2
s2 - s1
출력
{6, 7}

# 차집합2
s1.difference(s2)
출력
{1, 2, 3, 4}

s1 == s2           s1 != s2
출력
False                 True

s1.isdisjoint(s2)    # 완전 분리(공통된 값)가 되어 있냐?
출력                 # is가 들어가면 물어보는것이라고 생각하면됨
False 

print(s2)
s2.add(3)
print(s2)
출력
{5, 6, 7}
{3, 5, 6, 7}

print(s2)
s2.add([11, 12])    #  값을 여러개 넣고 싶은데 {},[] 넣으면 에러뜸
print(s2)
출력
{3, 5, 6, 7} 에러뜸

# 여러 개의 데이터를 update()함수를 이용해서 넣어 보기: 성공
print(s2)
s2.update([11, 12])    
print(s2)
출력
{3, 5, 6, 7}
{3, 5, 6, 7, 11, 12}

################## 13
# bool

a = TRUE
출력
에러뜸

c = True
type(c)
출력
bool

1 == 1          3 < 1
True              False

if "hello" :
    print(True)   #문자열인 조건식을 넣었는데 True로 인식함
                   #다른 언어에서는 에러뜸
출력
True

if "" :
    print(True)
else:
    print(False)
#값이 0 이상이면 True, 0 이면 False로 나옴
출력
False

if 1 :
    print(True)
else:
    print(False)
출력
True

if -1 :
    print(True)
else:
    print(False)
출력
True

if 0 :
    print(True)
else:
    print(False)   # 조건식에 0 넣으면 False, 0이외의 값은 True 나옴
출력
False

a = [1, 2, 3]
b = []
if a :
    print(True)
else :
    print(False)
출력
True

if b :
    print(True)
else :
    print(False)
출력
False

# 조건식에서
# 0 : False
# 1 : True
# 문자열, 리스트, 튜플, 딕셔너리 등은 0과 1을 어떻게 만들어내나?
# len()함수의 결과를 떠올리면 됨.

# null을 파이썬에서는
# None 으로 표현함
# 조건식에 None이 들어 있으면, False로 인식됨

###########################14

a = 1
b = a
print(a)          기본자료형임
print(b)
출력
1
1

a = 3
print(a)
print(b)
출력
3
1

c = [1, 2, 3, 4]
d = c
print(c)
print(d)
출력
[1, 2, 3, 4]
[1, 2, 3, 4]

c[0] = 300         # 참조자료형 임
print(c)
print(d)
출력
[300, 2, 3, 4]
[300, 2, 3, 4]

파이썬에는 자료형이 없습니다.
변수를 선언할때 자료형을 적지 않는다
그외에는 자료형으로 존재한다

e = True
f = e                 기본 자료형임
print(e)
print(f)
출력
True
True

e = False
print(e)
print(f)
출력
False
True

# = (할당연산자 = 대입연산자)를 이용해서 변수를 생성했을 때,
# 어떨 때는 하나의 값을 바꾸어도 각각의 값을 갖는데, 또 어떤 상황에서는 같은 값으로 갖는다

자료형
기본자료형:  메모리에 값을 직접 입력하고 그 메모리의 이름을 지정하는 방식
단일 숫자, 단일 Bool값(True,False)

참조자료형:  값이 저장되는 메모리와 그 값이 저장되는 메모리 주소를 갖고 있는 메모리
기본자료형이 아닌 자료형


g = "hello"
h = g
print(g)
print(h)
출력
hello
hello

g = "hi"
print(g)     # 문자형을 출력하면 기본자료형으로 보이겠지만 아니다!!
print(h)     # 단일 숫자, 단일 Bool값(True,False) 만 기본자료형이다
출력
hi
hello

id(a)                                  id(b)
출력
1931404798320                   1931404798256

a is b   # 비교 할때 is 쓰면 된다
출력
False

id(c)                             id(d)
출력
1931490562944             1931490562944

c is d
출력
True

g is h
출력
False

# c 와 d가 별개의 객체(데이터)를 갖도록 하고 싶으면,
i = [1, 2, 3, 4]
j = [1, 2, 3, 4]   이렇게 각각 작성하면 된다.

방법1
# c 와 d가 별개의 객체(데이터)를 갖도록 하고 싶으면,
i = [1, 2, 3, 4]
j = [1, 2, 3, 4]           실무에서는 거의 이렇게 작성을 한다
i is j
출력
False

방법2
# c 와 d가 별개의 객체(데이터)를 갖도록 하고 싶으면,
k = [1, 2, 3, 4]
m = k[:]         #각각의 데이터에 저장하고 싶으면...
k is m
출력
False

from copy import copy  # 앞에있는 copy는 모듈을 말하고 뒤에 copy는 함수를 가리킨다
n = k.copy()
print(n)
출력
[1, 2, 3, 4]

k is n
출력
False

p = 1
q = 3
r, s = (1, 3)
print(r)
print(s)            #파이썬에서만 이렇게 작성할 수 있다
출력
1
3

t = u = 10
print(t)
print(u)
출력
10
10

###################
치환 알고리즘

a = "사이다"
b = "콜라"

a에는 b가 갖고 있는 값을 넣고
b에는 a가 갖고 있는 값을 넣어라.

c = a
a = b
b = c  이게 치환 알고리즘 이다


####문제
23이 짝수인지 여부를 확인할 수 있는 코드를 작성해 보세요
if 조건식 :
    조건식이 참일 경우, 실행할 코드(print(True))
else :
    조건식이 거짓일 경우, 실행할 코드(print(False))
if 23 % 2 == 0 :
    print(True)
else :
    print(False)
출력
False

N / m
나머지의 범위: 0 ~ m-1 

####문제
주민번호: 001012-3079456
생년월일을 추출해주세요, 성별을 추출하세요
jumin = "001012-3079456"
jumin[:6]
출력
'001012'

또는
list_jumin = jumin.split("-")
list_jumin[0]
출력
'001012'

성별
jumin[7]
출력
'3'

###문제
# test2를 내림차순으로 정렬하시오
test2 = [1, 4, 2, 5, 2]            또는  test2.sort(reverse=True)
test2.sort()
test2.reverse()
print(test2)
출력
[5, 4, 2, 2, 1]

#######################15
##다중 if문
x = 3
if x == 3 :
    print(True)
elif x ==2 :              # elif 다중if문
    print(2, "입니다.")
elif x % 3 ==0 :
    print("3의 배수")
출력
True

#단순 if문
if x == 3 :
    print(True)           # 단순 if문

if x % 3 == 0 :
    print("3의 배수")
출력
True
3의 배수

if x :               # 변수만 있는 if문 0이 아니기 때문에 True 나옴
    print(True)     # 파이썬에서만 가능하고 되도록이면 안쓰는게 좋다
else :
    print(False)
출력
True

y = 0
if x == 3 and y == 0 :    # and 조건 둘다 맞으면 True
    print("All True")
출력
All True

if x and y :
    print("All True")
else :                           # and 조건 둘다 맞으면 True, 틀리면 False
    print("Some False")
출력
Some False


if x ==3 :
    
else :
    print(False)   # 조건이 맞으면 아무것도 하지마.  근데 다른언어에서는 가능하지만 파이썬에서는 오류뜸
출력
에러뜸

# 조건식을 만족하는 실행문에 아무것도 적지 않을 계획이라면, pass를 입력해야 함
if x ==3 :
    pass
else :
    print(False)


# 조건부 표현식 : ifelse, 삼항(조건)연산자
# 참일 경우의 값 if조건식 else거짓일 경우의 값

score = 70
a = "good" if score >= 70 else "bad"
print(a)
출력
good

##############16
##while 문
i = 0
while i < 10 :
    print("hello", i)
    i = i +1
출력
hello 0
hello 1
hello 2
hello 3
hello 4
hello 5
hello 6
hello 7
hello 8
hello 9

num = 45
i = 2
result = True

while i < num :
    if num % i == 0 :
        result = False
        break
    i = i + 1
    
if result :
    print(num, "은 소수입니다.")
else :
    print(num, "은 소수가 아닙니다.")
출력
45 은 소수가 아닙니다.

# 2 ~ 50 사이에 있는 소수를 다 찾아서 출력하세요 
num = 2
while num < 51 :                            ## 먼저 num = 2
    i = 2                                                  while num < 51 :
    result = True                                              print(num)       찍으면 숫자가 쭉 나온다
                                                                  num = num +1  여기에 print(num) 자리에 while 넣어서 쓰면 됨
    while i < num :
        if num % i == 0 :
            result = False
            break
        
        i = i + 1
    
    if result :
        print(num, "은 소수입니다.")
    else :
        print(num, "은 소수가 아닙니다.")
        
    num = num +1
출력
2 은 소수입니다.
3 은 소수입니다.
4 은 소수가 아닙니다.
5 은 소수입니다.
6 은 소수가 아닙니다.
7 은 소수입니다.
8 은 소수가 아닙니다.
9 은 소수가 아닙니다.
10 은 소수가 아닙니다.
11 은 소수입니다.
12 은 소수가 아닙니다.
13 은 소수입니다.
14 은 소수가 아닙니다.
15 은 소수가 아닙니다.
16 은 소수가 아닙니다.
17 은 소수입니다.
18 은 소수가 아닙니다.
19 은 소수입니다.
20 은 소수가 아닙니다.
21 은 소수가 아닙니다.
22 은 소수가 아닙니다.
23 은 소수입니다.
24 은 소수가 아닙니다.
25 은 소수가 아닙니다.
26 은 소수가 아닙니다.
27 은 소수가 아닙니다.
28 은 소수가 아닙니다.
29 은 소수입니다.
30 은 소수가 아닙니다.
31 은 소수입니다.
32 은 소수가 아닙니다.
33 은 소수가 아닙니다.
34 은 소수가 아닙니다.
35 은 소수가 아닙니다.
36 은 소수가 아닙니다.
37 은 소수입니다.
38 은 소수가 아닙니다.
39 은 소수가 아닙니다.
40 은 소수가 아닙니다.
41 은 소수입니다.
42 은 소수가 아닙니다.
43 은 소수입니다.
44 은 소수가 아닙니다.
45 은 소수가 아닙니다.
46 은 소수가 아닙니다.
47 은 소수입니다.
48 은 소수가 아닙니다.
49 은 소수가 아닙니다.
50 은 소수가 아닙니다.

# 소수만 ~은 소수입니다.로 출력되게 하세요.
num = 2
while num < 51 :
    i = 2
    result = True

    while i < num :
        if num % i == 0 :
            result = False
            break
        
        i = i + 1
    
    if result :
        print(num, "은 소수입니다.")
       
    num = num +1
출력
2 은 소수입니다.
3 은 소수입니다.
5 은 소수입니다.
7 은 소수입니다.
11 은 소수입니다.
13 은 소수입니다.
17 은 소수입니다.
19 은 소수입니다.
23 은 소수입니다.
29 은 소수입니다.
31 은 소수입니다.
37 은 소수입니다.
41 은 소수입니다.
43 은 소수입니다.
47 은 소수입니다.


# 소수만 ~은 소수입니다.로 출력되게 하세요.
# 소수를 list에 저장하기
sussu = list()
num = 2
while num < 51 :
    i = 2
    result = True

    while i < num :
        if num % i == 0 :
            result = False
            break
        
        i = i + 1
    
    if result :
        sussu.append(num)
       
    num = num +1

print(sussu)
출력
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]


# 피보나치수
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55(앞뒤숫자 더하기)
# 피보나치수 10개를 출력하세요
num = 1
num2 = 1
num3 = num + num2
print(num)
print(num2)
print(num3)

i = 0
while i < 7 :
    num = num2
    num2 = num3
    num3 = num + num2
    
    print(num3)
    
    i = i + 1
출력
1
1
2
3
5
8
13
21
34
55

# 피보나치수를 list에 저장하기: pibo_list 변수에 저장하기
pibo_list = list([1])
num = 1
num2 = 1
num3 = num + num2

i = 0
while i < 9 :
    
    num = num2
    num2 = num3
    num3 = num + num2
    
    pibo_list.append(num)
    
    i = i + 1
          
print(pibo_list)
출력
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]


# 구구단 중 5단 찍기
dan = 5
i = 1

while i < 10 :
    
    print(dan, "x", i, "=", dan * i)
    
    i = i + 1
출력
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45

# 구구단 다 찍기
dan = 2

while dan < 10 :
    print(dan, "단", "::::::::")
    
    i = 1

    while i < 10 :
    
        print(dan, "x", i, "=", dan * i)
    
        i = i + 1
    
    dan = dan + 1
출력
2 단 ::::::::
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18
3 단 ::::::::
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
4 단 ::::::::
4 x 1 = 4
4 x 2 = 8
4 x 3 = 12
4 x 4 = 16
4 x 5 = 20
4 x 6 = 24
4 x 7 = 28
4 x 8 = 32
4 x 9 = 36
5 단 ::::::::
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
6 단 ::::::::
6 x 1 = 6
6 x 2 = 12
6 x 3 = 18
6 x 4 = 24
6 x 5 = 30
6 x 6 = 36
6 x 7 = 42
6 x 8 = 48
6 x 9 = 54
7 단 ::::::::
7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
8 단 ::::::::
8 x 1 = 8
8 x 2 = 16
8 x 3 = 24
8 x 4 = 32
8 x 5 = 40
8 x 6 = 48
8 x 7 = 56
8 x 8 = 64
8 x 9 = 72
9 단 ::::::::
9 x 1 = 9
9 x 2 = 18
9 x 3 = 27
9 x 4 = 36
9 x 5 = 45
9 x 6 = 54
9 x 7 = 63
9 x 8 = 72
9 x 9 = 81

# 5단 빼고 다 찍기  방법1
dan = 2
while dan < 10 :
    if dan == 5 :
        dan = dan + 1 
        continue
        
    print(dan, "단")
    i = 1
    
    while i < 10 :
        print(dan, "x", i, "=", dan * i)
    
        i = i + 1
    
    dan = dan + 1

또는

# 5단 빼고 다 찍기   방법2
dan_list = [2, 3, 4, 6, 7, 8, 9]
j = 0
while j < len(dan_list):
    dan = dan_list[j]
    print(dan, "단")
    i = 1
    
    while i < 10 :
        print(dan, "x", i, "=", dan*i)
        i = i + 1
        
    j = j +1


# 60점 이상이면 합격  60점 미만이면 탈락  방법1
scores = [100, 60, 50, 80, 70]
idx = 0
while idx < len(scores) :
    if scores[idx] >= 60 :
        print("합격")
    else :
        print("탈락")
    
    idx = idx + 1
출력
합격
합격
탈락
합격
합격

또는

# 60점 이상이면 합격  60점 미만이면 탈락  방법2     더 간결하다.
scores = [100, 60, 50, 80, 70]
idx = 0
while idx < len(scores) :
    print("합격" if scores[idx] >= 60 else "탈락")
    
    idx = idx + 1
출력
합격
합격
탈락
합격
합격















































































































































































































































































































































































































