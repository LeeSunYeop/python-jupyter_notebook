반복문을 두번 사용
print를 이용해서 한 줄에 몇 개의 별표를 출력할 것인가에 대한 반복문 하나
start 변수, end 변수

start 변수가 처음에는 중앙에서 시작, end 변수도 중앙에서 시작함

11
start = (중앙값-1)-1, end = (중앙값-1)+1
start = 중앙값 -1, end = 중앙값 +1
start = 중앙값 -1 -1 -1, end = 중앙값 +1 +1 +1

print(aa, end = " ")


#################
list comprehension : 리스트 내포(이해력)
- 리스트 안에다가 값을 입력할 때, for문과 if문을 이용해서 곧 바로 리스트 안에 요솟값을 입력함.

리스트 만드는 방법
list = [1, 2, 3, 4, 5]
list = list([3, 4, 5, 6])

list. append(4)

for x in range(10) :
           if x % 2 == 0 :
                    list.append(x)

list = [x for x in range(10) if x % 2 == 0]   #위에랑 같은 뜻
0부터9까지의 숫자를 각각 2로 나눠서 나머지가 0인것만 맨 앞에 있는 x에 담아라는 뜻

##########list 내포로 코드 짜세요
list2 = [ ]
for i in range(1, 11) :
            if i%3 == 1 :
                       list2.append(i)
입력
list2 = [i for i in range(1, 11) if i % 3 == 1]
print(list2)
출력
[3, 6, 9]

#############
list3= [ ]
for i in range(1, 11) :
            if i%3 == 1 :
                       list3.append(i*2)

입력
list3 = [i*2 for i in range(1, 11) if i % 3 == 1]
print(list3)
출력
[2, 8, 14, 20]

##########
list4 = [ ]
for i in range(1, 5) :
           list4.append(i)

입력
list4 = [i for i in range(1, 5)]
print(list4)
출력
[1, 2, 3, 4]

###########
list5 = [ ]
for i in range(1, 5) :
           list5.append(i // 3)
입력
list5 = [i // 3 for i in range(1, 5)]
print(list5)
출력
[0, 0, 1, 1]

#########
for문 이용해서 구구단 찍기
1. 함수 printDan(dan)를 이용해서 특정 단을 찍고
2. gugudan( )함수를 이용해서 모든 구구단 찍기

1. def printDan(dan) :
    print(dan, "단")
    
    for i in range(1, 10):
        print(dan, "x", i, "=", dan*i)
printDan(2)

2. def gugudan() :
    for dan in range(2, 10):
        printDan(dan)
gugudan()

#######################
def a1() :
    a = 3
    b = 4
    a, b = b, a
    print(a, b)
a1()
출력
4 3

def a2(a, b) :
    a, b = b, a
    print(a, b)
a2(10, 20)
출력
20 10

def a3() :
    a= 10
    b = 20
    a, b = b , a
    return a , b
c , d = a3()
print(c)
print(d)
출력
20
10

# 또는
t1 = a3 ()
type(t1)
출력
tuple

def a4(n) :
    for i in range(n) :
        print(i)
    
    return f'{n} 번 반복했습니다.'
str = a4(4)
출력
0
1
2
3

str
출력
'4 번 반복했습니다.'

# function를 생성할 때, 함수명 옆에 있는 ()에 적는 것을 매개변수(=파라미터=파람)라고 한다
# function를 호출할 때, 함수명 옆에 있는 ()에 값을 적는데, 이 값을 인수(argument)라고 한다

def a2(a, b) :
    a, b = b, a
    print(a, b)

a2(10, 20)
# 10은 a2 함수의 매개변수 a에 입력되고,
# 20은 a2 함수의 parameter b에 입력됨
출력
20 10

a2(20, 10)
# a = 20
# b = 10  
출력
10 20

a2(b=20, a=10)   # 이것은 파이썬에서만 가능한 코드이다
출력
20 10

# variable argument: 함수 호출할 때, 입력해야 할 데이터를 특정지을 수 없을 때가 있습니다.
# 이럴 때는 함수를 어떻게 생성해야 하는가?

def plus1(a, b) :
    sum = a + b
    print(sum)
plus1(1, 2)
출력
3

def plus3(a, b, c, d) :
    sum = a + b + c + d
    print(sum)
plus3(1, 2, 3, 4)
출력
10

정해지지 않는 숫자를 넣을때는 * 를 입력한다
def plus(*args) :  # args : arguments 약자 , 변수는 내가 정하면 됨
    #print(type(args))
    for i in args :
        print(i)
plus(1, 2, 3, 4, 5)
출력
1
2
3
4
5

def plus2(*args) :
    sum = 0
    for i in args :
        sum = sum + i
    
    print(sum)
plus2(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
출력
55

   * 변수 앞에 값 넣기
# def plus(*args, name) :  # 이렇게 쓰면 오류난다
def plus3(name, *args) :
    pass
plus3("홍길동", 1, 2, 3, 4, 5, 6)


######
# keyword parameter(**kwargs)
# dictionary를 생각해 보세요
# {key, val} 형태의 딕셔너리로 출력됨
# 딕셔너리의 값을 입력하고 싶을 때, 사용하세요

def dic1(**kwargs) :
    print(kwargs)
dic1(a=1)
출력
{'a': 1}

dic1(id="m1", name="홍길동", age=16)
출력
{'id': 'm1', 'name': '홍길동', 'age': 16}


# 함수의 호출 형태만 봐서는 키워드 파라미터가 적용됐는지 여부를 알 수 없다.

# 1. 함수의 기본 4 유형: 재학습
# 2. 함수의 호출 방법: 재학습
# 3. 매개변수를 지정해서 인수를 넣는 호출: 처음
     # a2(a=10, b=20)
# 4. variable argument: 매개변수의 수를 특정지을 수 없을 때 사용
#    매개변수명 앞에 *를 붙임. 해당 매개변수는 튜플로 인식됨
# 5. keyword parameter(키워드파라미터): 인수를 딕셔너리로 받고 싶을 때.
# 6. return에 대해 추가 학습: 
#     - 함수를 호출한 곳으로 값을 반환
#     - 함수의 실행을 중단
# 7. 매개변수 초기화: 
#     - 비초기화 매개변수가 앞에 선언되고, 초기화 매개변수가 뒤에 온다.
# 8. 함수의 인수가 될 수 있는 값의 형태(변수의 값이 될  수 있는 형태)
#     - 실제 값
#     - 변수
#     - 값을 반환하는 함수
# 9. 함수 내 선언된 변수의 스코프(유효 범위):
# 10. 함수 내에 외부의 변수를 사용하는 방법: 아직...비권장사항
# 11. labda식 학습 

def test1() :
    return 111    # 리턴문

result = test1()  
print(result)
출력
111

# return의 기능
# - 함수 내의 값을 해당 함수를 호출하는 곳으로 반환하고 싶을 때 사용
# - 함수 내의 실행을 중단하고 싶을 때

def test2() :
    print(1)
    print(2)
    return
    print(3)
    print(4)
    print(5)
test2()
1             
2

def test3(num) :
    if(num == -1) :
        return
    
    print(num * 100)

test3(100)
출력
10000

test3(-1)  # 조건에 만족되어 밑에 있는 print를 실행하지 않고 중단되어 빠져 나온다.
출력안됨


# 함수의 매개변수 초기화
# 초기화가 안 된 매개변수가 앞에 선언되어야 하고, 초기화된 매개변수가 뒤에 선언됨
def init1(a, b,  c) :
    print(a)
    print(b)
    print(c)
init1(1, 2, 3)
출력
1
2
3

def init2(a, b, c=3) :
    print(a)
    print(b)
    print(c)
init2(1, 2, 5)
출력
1
2
5

init2(1, 2)
출력
1
2
3

def init3(a=2, b, c) :    # 실행하면 오류가 뜨는데 a=2는 b,c 앞에 있으면 안된다
    print(a)               # 즉 b,c,a=2 맨 뒤에 있어야 한다
    print(b)
    print(c)
출력
오류뜸

def init3(b, c, a=2) :    
    print(a)               
    print(b)
    print(c)
init3(3, 2)
출력
2
3
2

def init4(a, b=True, c = -1) :
    print(a)               
    print(b)
    print(c)

init4(1, False, 2)                  init(100)            init4(1, 2, 3)    
출력
1                                   100                 1
False                               Ture                2
2                                    -1                  3

# 함수의 인수로 들어갈 수 있는 값의 형태(변수를 선언하거나 대입할 때 들어 갈수 있는 형태)
# - 실제 값
# - 변수
# - 값을 반환하는 함수

data1 = 4
data2 = [1, 2, 3, 4]
data3 = True

data4 = data1    # 똑같이 데이터 값을 받지만
data5 = data2    # 데이터를 넘겨 받지만 주소값을 받는 것이다
data6 = data3    # 실제 데이터값을 받는다

def b1() :         # 반환하는 값이 없는 함수
    a = 3

def b2() :         # 값을 반환하는 함수
    return 4;

data7 = b1()
print(data7)   # 반환값이 없을때는 값이 비어 있다
출력
None

print(b1())
출력
None

data8 = b2()   
print(data8)
출력
4

#######
함수에서 선언된 변수의 스코프(유효 범위)
- 함수 생성과 함수 호출이 다르다는 것을 알고 있니?
  - 함수 생성과 함수 호출은 다름

def ha(n) :
      print(n)

<함수생성>
함수가 생성되면, 그 함수 내에 있는 코드가 자동으로 실행되는가?
안된다
<함수호출>
함수 내에 있는 코드는 함수를 호출했을 때, 자동으로 실행됨

함수 내에 선언된 변수의 스코프 :

# ha2() 함수 내에 선언된 변수를 모두 찾으시오
def ha2(n) :
    a =3
    print(n)
    print(a)
# ha2() 함수 내에 선언된 변수를 모두 찾으시오 => 2개다
# - a
# - n 매개변수도 함수 내에서 선언된 변수

# 함수 내 선언된 변수의 스코프는 
# 그 변수(지역변수 = 로컬변수)가 선언된 함수에서
# 그 변수가 선언된 직후부터 그 함수 끝까지입니다.

def ha2(n) :  # n :매개변수
    print(a)   # <-  변수 a = 3 이 밑에 있는데 그전에 print(a) 가 있어서 실행하면 오류가 뜨는 이유다
    a =3     # a : 지역변수
    print(n)
    print(a)

ha2(3)
출력
오류뜸

def ha3() :
    a = 10
    
    if a>0 :
        b = 20
    
    print(b)  
ha3()  # 함수 내에 선언된 변수는 그 변수가 선언된 직후부터 함수가 끝날 때까지 유효합니다.
       # 일반적으로 그렇습니다. 깊이 들어가면 좀 다릅니다
       # 파이썬만 이렇습니다
       # c언어 java등 다른 언어는 아닙니다
       # 함수가  끝날 때까지 유효 합니다
       # for문은 파이썬과 c언어에서는 그안에서 선언된 변수가
       # 그밖에서 인식이 됨
       # 함수가 끝날 때까지 유효합니다
출력
20


# 10. 함수 내에 외부의 변수를 사용하는 방법: 아직...비권장사항

def ha4(n) :
    c = 40
    print(n)
    print(c)
    global d     # global 함수 밖에서 선언된 변수다 라는 의미를 가지고 있다
    print(d)

d = 100
ha4(3)
출력
3
40
100

#######
# 11. lambda식 학습
def ha5(x, y) :
    return x*y
ha5(3, 4)
출력
12

# 함수는 함수를 생성한 후에 함수를 호출해야 그 안에 있는 코드가 실행됨.
multi = lambda x, y : x*y 
multi(3, 4)
출력
12

def ha6(x , y) :
    print(x)
    print(y)
    return x + y 
add = lambda x, y : x+y
add(3, 4)
출력
7

# lambda식은 한 줄로 된 코드를 반환하기 위해서 사용한다.(X)

add = lambda x, y : ha6(x, y)
add(3, 4)
출력
3
4
7

def ha7() :
    def ha71() :
        print(50)
    
    print(100)
# 진짜 주의할 사항: 파이썬은 함수 내에 함수를 선언할 수 있다.
# 다른 언어에서는 절대로 있을 수 없는 이야기이다.

ha7()
출력
100

# lambda식을 더 확장해서 학습하기..
def ha8(func) :
    result = func(3)
    print(result)

def test_ha8(num) :
    return num * num

ha8(test_ha8) 
출력
9

# lambda식으로 하면은..
func_square = lambda x : x*x
ha8(func_square)
출력
9

ha8(lambda x : x*x)
출력
9

def ha9(func, num) :    # 기본 함수를 작성해 주고 다음에 람다식을 써 준다
    result = func(num)
    print(result)

# 람다식으로 하면..
ha9(lambda x: x*x, 15)
출력
225

def ha10(func) :
    result = func(3, 4)
    print(result)

def test_ha10 (x, y):
    return x + y

ha10(test_ha10)
출력
7

def ha10(func, num1, num2) :
    result = func(num1, num2)
    print(result)

def test_ha10 (x, y):
    return x + y

ha10(test_ha10, 5, 10)
출력
15

ha10(lambda x, y : x + y, 10, 20)  # lambda x, y : x + y 펑션이고, 10, 20이 num1,num2 인 셈이다
출력
30

list(map(lambda x : x * x, [1, 2, 3, 4])) # 각각의 숫자가 들어가서 계산이 되어짐
출력
[1, 4, 9, 16]

# 함수 만들기 귀찮을 때, 람다식을 이용해서 사용함
# 함수 만들기 귀찮더라도, 같은 코드를 여러 번 사용해야 한다면 절대로 람다식으로 만들면 안된다
# 람다식은 단 한번만 사용되고, 다음에는 절대로 다시 사용할 계획이 없는 함수
# 어떤 함수에서 인수로 함수를 요구할 때는 람다식을 써도 괜찮음.

list(map(lambda x, y : x*y, [1, 2, 3, 4], [2, 3, 4, 5]))  # 1*2, 2*3, 3*4, 4*5 이렇게 계산이 된다
출력
[2, 6, 12, 20]

#############
내장함수학습

all( ) 함수 :
주의 사항 : all( )함수는 숫자 0일 때만 False고, 그외에는 다 True

bool 자료형 배울 때,
숫자: 0(False), 0이외의 숫자(-1,1등)은 True
문자열, 리스트, 튜플, 셋이나 이들은 len(문자열), len(리스트)등을 햇을때, 0이면 False, 0이 아니면 True

[1, 2, 3]
[       ]  값이 비어 있어도 다 True로 인식함

abs(-3)   # 절대값
출력
3

all([1, 2, 3])   #  0을 제외한 값은 다 Ture , 요소 하나하나값을 가지고 물어본다
출력
True

all([0, 1, 2, 3])  # 0이 맨 앞에 있어 0을 읽자마자 False 인식하고 뒤에 있는값을 보지도 않고 빠져나온다.
출력
False

all("")   # "hello" True나옴
출력
True

all([])  # all(()) , all({})  => True 나옴
출력
True

any([1, 2, 3])  #어떤것이 하나라도 True 있으면 True임
출력
True

any([0, 0, 1])
출력
True

any([0, 0, 0])
출력
False

any([])  # any("") , any({})  다 False 나옴
출력
False

######
dir([1, 2, 3])  목록이 쭉 나옴
내장 함수는 어떤 객체를 인자로 넣어주면 해당 객체가 어떤 변수와 메소드(method)를 가지고 있는지 나열해줍니다.

divmod(10, 3)   # (몫, 나머지)로 출력됨
출력
(3, 1)

divmod(10, 3)[0]   또는   10//3  같은 기능임
출력
3

divmod(10, 3)[1]  또는 10%3    같은 기능임
출력
1

def divmod2(num1, num2) :
    # 몫과 나머지를 반환하는 기능
    return num1 // num2, num1 % num2

divmod2(5, 5)
출력
(1, 0)

간단하게
divmod(5, 5)
출력
(1, 0)

# enumerate: 열거하다, 나열하다
# enumerate():
# 리스트, 튜플, 문자열의 데이터를 넘겨받아서 인덱스 정보를 추가적으로 획득하고플 때

# 인덱스를 알고 싶을 때
a = [1, 10, 100, 1000]        

for i, x in enumerate(a) :
    print(i, x)
출력
0 1
1 10
2 100
3 1000

a = [1, 10, 100, 1000]        

for i, x in enumerate(a) :
    print(i+1, x)
출력
1 1
2 10
3 100
4 1000

a = {"냉장고":1, "tv":2, "pc":3}        

for i, x in enumerate(a) :
    print(i+1, x)             # 키만 나온다
출력
1 냉장고
2 tv
3 pc

a = {"냉장고":1, "tv":2, "pc":3}        

for i, x in enumerate(a) :
    print(i+1, x, a[x])     # 키랑 값이 나온다
출력
1 냉장고 1
2 tv 2
3 pc 3

b = set(["a", "b", "c"])
for i, x in enumerate(b) :
    print(i+1, x)
출력
1 a
2 c
3 b

# eval(): 문자열로 된 데이터를 이용해서 그 문자열에 해당하는 연산을 지원하는 함수
# 서버에서 내려주는 데이터의 타입은 대부분 문자열.
# 서버로 보내주는 데이터의 타입은 대부분 문자열

eval("1+2")     eval("'hello'*3")          eval("abs(-3)")
출력
3                 'hellohellohello'         3

############
# filter()
?filter

list(filter(None, [1, 2, 3, 4, 5, 0]))    # 0은 False 이니깐 빼고 출력됨
출력
[1, 2, 3, 4, 5]

list(filter(None, [1, 2, 3, 4, 5, 0, (1, 2, 3), {"id":"m001"}, {}])) # 값을 아무것도 입력안하면 False 이니깐 뺴고 출력됨
출력
[1, 2, 3, 4, 5, (1, 2, 3), {'id': 'm001'}]

########
# hex 16진수 표기할때 씀
hex(10)
출력
'0xa'

# oct 8진수 표기할때 씀
oct(10)
출력
'0o12'

a = 3
b = a
a = 4

print(id(a))
print(id(b))      # 출력값보면 서로 다르게 저장되고 값이 다르게 표기됨
출력
저장된 주소값나옴
2764125399440
2764125399408

a = [1, 2, 3]
b = a
a[0] = 100
print(b)

print(id(a))
print(id(b))
출력
[100, 2, 3]
2764235696640
2764235696640

# 사용자로부터 데이터를 입력받고 싶을 때, 사용하는 함수: input()
a = input() 실행하면 입력창이 나옴

hello  

print(a)
출력
hello  


b = input("더하기 할 숫자를 입력하세요.")
실행하면 입력창이 나옴
더하기 할 숫자를 입력하세요.3

print(b)
출력
3

# 정수로 만들어주는 함수 int()
print("333"+str(4))
a = int("333")
print(a+4)
출력
3334
337

int(3.14)   # 정수로 만든다
출력
3

int(9.9)
출력
9

int("111", 2)   # 2를 넣으면 2진수 입니다고 인식된다
출력
7

int("111", 8)   # 8를 넣으면 8진수 입니다고 인식된다
출력
73

int("111", 16)   # 16을 넣으면 16진수 입니다고 인식된다
출력
273

bin(3)  # 2진수로 나타내기
출력
'0b11'

len([1, 2, 3, 4, ])
출력
4

list("1234455")   # 리스트 만들기
출력
['1', '2', '3', '4', '4', '5', '5']

list((1, 2, 3, 4))   # 리스트 만들기
출력
[1, 2, 3, 4]

list([1, 2, 3, 4, 5, 6])   #리스트안에 리스트 만들기
출력
[1, 2, 3, 4, 5, 6]

max([1, 3, 2, -1])   # 최대값
출력
3

min([1, 3, 2, -1])   # 최소값
출력
-1

pow(3, 2)  # 3의 제곱  , pow(3, 4) 3의 4제곱
출력
9

list(range(4, 10))
출력
[4, 5, 6, 7, 8, 9]

sum([1, 2, 3, 4, 5])
출력
15























































































































